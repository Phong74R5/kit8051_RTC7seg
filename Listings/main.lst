C51 COMPILER V9.60.7.0   MAIN                                                              10/01/2024 12:29:01 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>   
   2          #define Display P0
   3          #define chonLED P2      
   4          sbit SCLK = P3^6;
   5          sbit IO = P3^4;
   6          sbit CE = P3^5;
   7          char CHEDO = 1;
   8          sbit SW = P3^3;
   9          
  10          unsigned char code Code7segCatot[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d,
  11                                               0x7d, 0x07, 0x7f, 0x6f, 0x77};
  12                                               //thu tu: giay phut gio nam thang ngay                 
  13          unsigned char Time[6] = {0x10, 0x16, 0x23, 0x24, 0x10, 0x01};
  14          
  15          
  16          // RTC Register Map (Address, Read/Write, Bits, Range)
  17          // read-write
  18          // 81h-80h: Seconds (00–59)
  19          // Bit 7: CH (Clock Halt), Bit 6: 10s, Bits 5–0: Seconds
  20          
  21          // 83h-82h: Minutes (00–59)
  22          // Bit 6: 10m, Bits 5–0: Minutes
  23          
  24          // 85h-84h: Hour (1–12/0–23)
  25          // Bit 7: 12/24, Bit 6: AM/PM, Bit 5: 10h, Bits 4–0: Hour
  26          
  27          // 87h-86h: Date (1–31)
  28          // Bit 5: 10d, Bits 4–0: Date
  29          
  30          // 89h-88h: Month (1–12)
  31          // Bit 4: 10m, Bits 3–0: Month
  32          
  33          // 8Bh-8Ah: Day (1–7)
  34          // Bits 2–0: Day
  35          
  36          // 8Dh-8Ch: Year (00–99)
  37          // Bit 7: 10y, Bits 6–0: Year
  38          
  39          // 8Fh-8Eh: Status Register
  40          // Bit 7: WP (Write Protect)
  41          
  42          // 91h-90h: Control Register
  43          // Bits 7–4: TCS, Bits 3–2: DS, Bits 1–0: RS
  44          
  45          unsigned char READ[6] = {0x81,0x83,0x85,0x8D,0x89,0x87};
  46          unsigned char WRITE[6] = {0x80,0x82,0x84,0x8C,0x88,0x86};
  47          
  48          // Ham tao do tre bang us
  49          void delay_us(unsigned int us_count)
  50          {  
  51   1        while(us_count!=0)
  52   1        {
  53   2          us_count--;
  54   2        }
C51 COMPILER V9.60.7.0   MAIN                                                              10/01/2024 12:29:01 PAGE 2   

  55   1      }
  56          
  57          // Doc du lieu tu RTC
  58          unsigned char RTC_READ(unsigned char add)
  59          {
  60   1        unsigned char dat, temp, i;
  61   1        CE = 1; // Kich hoat CE
  62   1        SCLK = 0;
  63   1        delay_us(1);
  64   1        for(i = 0;i<8;i++) // Gui dia chi
  65   1        {
  66   2          IO = add & 0x01;
  67   2          add >>= 1;
  68   2          SCLK = 1;
  69   2          delay_us(1);
  70   2          SCLK = 0;
  71   2          delay_us(1);
  72   2        }
  73   1        for(i = 0;i<8;i++) // Nhan du lieu
  74   1        {
  75   2          temp = IO;
  76   2          dat = (dat>>1)|(temp<<7);
  77   2          SCLK = 1;
  78   2          delay_us(1);
  79   2          SCLK = 0;
  80   2          delay_us(1);
  81   2        }
  82   1        delay_us(1);
  83   1        CE = 0; // Tat CE
  84   1        return dat;
  85   1      }
  86          
  87          // Ghi du lieu vao RTC
  88          void RTC_WRITE(unsigned char add, unsigned char dat)
  89          {
  90   1        unsigned char i;
  91   1        CE = 1; // Kich hoat CE
  92   1        SCLK = 0;
  93   1        delay_us(1);
  94   1        for(i = 0;i<8;i++) // Gui dia chi
  95   1        {
  96   2          IO = add & 0x01;
  97   2          add >>= 1;
  98   2          SCLK = 1;
  99   2          delay_us(1);
 100   2          SCLK = 0;
 101   2          delay_us(1);
 102   2        }
 103   1        for(i = 0;i<8;i++) // Gui du lieu
 104   1        {
 105   2          IO = dat & 0x01;
 106   2          dat >>= 1;
 107   2          SCLK = 1;
 108   2          delay_us(1);
 109   2          SCLK = 0;
 110   2          delay_us(1);
 111   2        }
 112   1        delay_us(1);
 113   1        CE = 0; // Tat CE
 114   1      }
 115          
 116          // Cai dat thoi gian cho RTC
C51 COMPILER V9.60.7.0   MAIN                                                              10/01/2024 12:29:01 PAGE 3   

 117          void SetRTC()
 118          {
 119   1        unsigned char i;
 120   1        RTC_WRITE(0x8e, 0x00); // Tat che do bao ve ghi
 121   1        for(i = 0;i< 6;i++)
 122   1        {
 123   2          RTC_WRITE(WRITE[i],Time[i]); // Ghi thoi gian
 124   2        }
 125   1        RTC_WRITE(0x8e, 0x80); // Bat lai che do bao ve ghi
 126   1      }
 127          
 128          // Lay thoi gian tu RTC
 129          void GetRTC()
 130          {
 131   1        char i;
 132   1        for(i = 0;i<6;i++)
 133   1        {
 134   2          Time[i] = RTC_READ(READ[i]); // Doc thoi gian
 135   2        }
 136   1      }
 137          
 138          // Hien thi thoi gian
 139          void HienThi(unsigned char *Time, unsigned char chedo) {
 140   1        unsigned char i, range;
 141   1        // range = 0: hien thi gio; range = 3: hien thi ngay
 142   1        if(chedo)
 143   1          range = 0;
 144   1        else
 145   1          range = 3;
 146   1      
 147   1        for(i = 0;i<7;i+=3) // Hien thi chu so hang chuc va don vi
 148   1        {
 149   2          chonLED = ((unsigned char)(i)<<2);
 150   2          Display = Code7segCatot[Time[i/3 + range] & 0x0f];
 151   2          delay_us(100);
 152   2          chonLED = ((unsigned char)(i+1)<<2);
 153   2          Display = Code7segCatot[(Time[i/3 + range]>>4) & 0x0f];
 154   2          delay_us(100);
 155   2        }
 156   1        // Hien thi dau gach ngang
 157   1        chonLED = ((unsigned char)(2)<<2);
 158   1        Display = 0x40;
 159   1        delay_us(100);
 160   1        chonLED = ((unsigned char)(5)<<2);
 161   1        Display = 0x40;
 162   1        delay_us(100);
 163   1      }
 164          
 165          // Khoi tao ngat Timer0
 166          void Interrupt_Timer0(void) {
 167   1        TMOD = 0x01; // Chon che do 1
 168   1        TH0 = 0xFC;  // Gia tri ban dau cua thanh ghi TH0
 169   1        TL0 = 0x18;  // Gia tri ban dau cua thanh ghi TL0
 170   1        ET0 = 1;     // Cho phep ngat Timer 0
 171   1        EA = 1;      // Cho phep ngat toan cuc
 172   1        TR0 = 1;     // Bat Timer 0
 173   1      }
 174          
 175          // Ham xu ly ngat Timer
 176          void ISR_TIMER(void) interrupt 1 { 
 177   1        if (ET0 == 1) {
 178   2          if (SW == 0) { // Neu nut bam duoc nhan
C51 COMPILER V9.60.7.0   MAIN                                                              10/01/2024 12:29:01 PAGE 4   

 179   3            delay_us(100);
 180   3            if (SW == 0) {
 181   4              CHEDO++; // Thay doi che do hien thi
 182   4            }
 183   3            if (CHEDO > 1)
 184   3              CHEDO = 0;
 185   3          }
 186   2          TH0 = 0xFC; // Khoi phuc gia tri ban dau cua Timer
 187   2          TL0 = 0x18;
 188   2        }
 189   1      }
 190          
 191          // Chuong trinh chinh
 192          void main() 
 193          {
 194   1        SetRTC();           // Cai dat RTC
 195   1        Interrupt_Timer0(); // Khoi tao ngat Timer0
 196   1        
 197   1        // Hien thi thoi gian va ngay lien tuc
 198   1        while(1)
 199   1        {
 200   2          GetRTC();           // Lay thoi gian tu RTC
 201   2          HienThi(Time, CHEDO); // Hien thi thoi gian len LED 7 doan
 202   2        }
 203   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    421    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
